
# Global settings

# Colors
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

# Let's get it started!
setup() {
    printf "\n\n%s\n\n" "${MAGENTA}${BRIGHT}Getting Started${NORMAL}"
    # Make temp scratch dir
    scratch=$(mktemp -d -t tmp.XXXXXXXXXX)

    sudo apt-add-repository ppa:ansible/ansible

    # Install Vivaldi browser
    wget -qO- https://repo.vivaldi.com/archive/linux_signing_key.pub | gpg --dearmor | sudo dd of=/usr/share/keyrings/vivaldi-browser.gpg
    echo "deb [signed-by=/usr/share/keyrings/vivaldi-browser.gpg arch=$(dpkg --print-architecture)] https://repo.vivaldi.com/archive/deb/ stable main" | sudo dd of=/etc/apt/sources.list.d/vivaldi-archive.list
   
    # Change shell to ZSH
    chsh -s $(which zsh)
    
    doupdate
}

# Install needed packages via apt
apt_install() {
    printf "\n\n%s\n\n" "${MAGENTA}${BRIGHT}Installing required packages and libraries${NORMAL}"
    sudo apt install --ignore-missing $(< ${HOME}/.config/packages.list) -y
}

git_setup() {
    printf "\n\n%s\n\n" "${MAGENTA}${BRIGHT}Setting up git with user.name and user.email${NORMAL}"
    read "git_user?Git user.name: "
    read "git_email?Git user.email: "
    printf "\n%s" "${BLUE}Doing git setup, user.name = ${git_user}, user.email = ${git_email}${NORMAL}"
    git config --global user.email "${git_email}"
    git config --global user.name "${git_user}"
}

install_programming_languages() {
    printf "\n\n%s\n\n" "${MAGENTA}${BRIGHT}Installing programming languages${NORMAL}"

    # Rust
    printf "${BLUE}Installing Rust\n${NORMAL}"
    curl --proto '=https' --tlsv1.2 --silent --show-error --fail https://sh.rustup.rs | sh -s -- -y
    source $HOME/.cargo/env

    # Node.js
    printf "${BLUE}Installing node.js\n${NORMAL}"
    # Pipe install node into bash and pass -y
    curl --silent --location install-node.now.sh/lts | sudo bash -s -- -y
}

cargo_install() {
    printf "\n\n%s\n\n" "${MAGENTA}${BRIGHT}Installing cool stuff via Cargo${NORMAL}"
    cargo install $(< ${HOME}/.config/cargo.list)
}

git_clone() {
    git_repo_dir=$(echo ${git_repo} | cut -d '/' -f 5 | cut -d '.' -f 1)
    git clone --recurse-submodules ${git_repo//[$'\t\r\n']} ${scratch}/${git_repo_dir}
}

make_install_source() {
    export CMAKE_BUILD_TYPE=Release
    
    while IFS="" read -r git_repo || [ -n "$git_repo" ]
    do
        printf "%s\n" "${BLUE}Cloning ${git_repo} and make installing${NORMAL}"
        git_clone
        make --directory=${scratch}/${git_repo_dir}
        sudo make --directory=${scratch}/${git_repo_dir} install
    done < ${HOME}/.config/make.list
}

cargo_build_source() {

    while IFS="" read -r git_repo || [ -n "$git_repo" ]
    do
        printf "%s\n" "${BLUE}Cloning ${git_repo} and building with Cargo${NORMAL}"
        git_clone
        cd ${scratch}/${git_repo_dir}
        cargo build --release
        sudo cp ${scratch}/${git_repo_dir}/target/release/${git_repo_dir} /usr/bin/
    done < ${HOME}/.config/cargo_build.list
}

cmake_install_source() {

    while IFS="" read -r git_repo || [ -n "$git_repo" ]
    do
        printf "%s\n" "${BLUE}Cloning ${git_repo} and building with Cmake${NORMAL}"
        git_clone
        mkdir ${scratch}/${git_repo_dir}/build
        cd ${scratch}/${git_repo_dir}/build
        cmake ..
        make
        sudo make install
    done < ${HOME}/.config/cmake_build.list
}

weird_installs() {

    printf "\n\n%s\n\n" "${MAGENTA}${BRIGHT}Installing weird ones${NORMAL}"
    # Clone i3lock color, build, and install
    git_repo=https://github.com/Raymo111/i3lock-color.git
    git_clone
    cd ${scratch}/${git_repo_dir}
    ./install-i3lock-color.sh

    # Install betterlockscreen
    cd ${scratch}
    wget \
    https://raw.githubusercontent.com/betterlockscreen/betterlockscreen/main/install.sh \
    -O - -q | sudo bash -s system

    wget https://github.com/obsidianmd/obsidian-releases/releases/download/v1.4.5/obsidian_1.4.5_amd64.deb
    dpkg -i obsidian_1.4.5_amd64.deb

    cd
    
}

final_setup() {
    # Use sed to change chezmoi git to use SSH instead of https
    printf "\n\n%s\n\n" "${BLUE}Reconfiguring and moving chezmoi${NORMAL}"
    sed -i 's/https:\/\//git@/' ~/.local/share/chezmoi/.git/config
    sed -i 's/m\/t/m:t/' ~/.local/share/chezmoi/.git/config

    # Move chezmoi into a more accesible place.
    sudo cp ~/bin/chezmoi /usr/bin/

    tldr --update

    pip install pynvim
    pip install -U jedi-language-server

    # Run neovim commands headless
    # `-c` indicates a command run after initial config is loaded
    # The `|q` quits after running the commands
    local coc_install_list='coc-sh coc-yaml coc-jedi coc-docker \
    @yaegassy/coc-ansible coc-rust-analyzer coc-groovy coc-clangd' 
    vim -c 'PackerInstall|q'
    vim -c 'CocInstall ${coc_install_list}|q'

    printf "\n\n%s\n" "${RED}${BRIGHT}Run PackerInstall in Neovim${NORMAL}"
    printf "\n\n%s\n\n" "${RED}${BRIGHT}${NORMAL}"
}

# Cleanup
finish() {
    rm --recursive --force ${scratch}
}

# NEW SCRIPT START HERE
setup
apt_install
git_setup
install_programming_languages
cargo_install

make_install_source
cmake_install_source
cargo_build_source
weird_installs

final_setup

trap finish EXIT
